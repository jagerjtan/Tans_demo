<script type="text/javascript">
        cpus = document.getElementById('cpus');
        var mytest = echarts.getInstanceByDom(cpus);

        var time = ["", "", "", "", "", "", "", "","",""],
            cpu1 = [0, 0, 0, 0, 0, 0, 0, 0,0,0],
            cpu2 = [0, 0, 0, 0, 0, 0, 0, 0,0,0],
            cpu3 = [0, 0, 0, 0, 0, 0, 0, 0,0,0],
            cpu4 = [0, 0, 0, 0, 0, 0, 0, 0,0,0]

        {#var time = [""],#}
        {#    cpu1 = [],#}
        {#    cpu2 = [],#}
        {#    cpu3 = [],#}
        {#    cpu4 = []#}

        //准备好统一的 callback 函数
        var update_mychart = function (res) { //res是json格式的response对象

            // 隐藏加载动画
            {#mytest.hideLoading();#}

            // 准备数据
            time.push(res.data[0]);
            cpu1.push(parseFloat(res.data[1]));
            cpu2.push(parseFloat(res.data[2]));
            cpu3.push(parseFloat(res.data[3]));
            cpu4.push(parseFloat(res.data[4]));
            if (time.length >= 10) {
                time.shift();
                cpu1.shift();
                cpu2.shift();
                cpu3.shift();
                cpu4.shift();
            }

            // 填入数据
            mytest.setOption({
                xAxis: {
                    data: time
                },
                series: [{
                    name: 'cpu1', // 根据名字对应到相应的系列
                    data: cpu1
                }, {
                    name: 'cpu2',
                    data: cpu2
                }, {
                    name: 'cpu3',
                    data: cpu3
                }, {
                    name: 'cpu4',
                    data: cpu4
                }]
            });

        };

        // 建立socket连接，等待服务器“推送”数据，用回调函数更新图表
        $(document).ready(function () {
            namespace = '/test';
            var socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port + namespace);

            socket.on('server_response', function (res) {
                update_mychart(res);
            });

        });
</script>